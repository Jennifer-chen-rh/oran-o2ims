// Code generated by MockGen. DO NOT EDIT.
// Source: resource_pool_fetcher.go
//
// Generated by this command:
//
//	mockgen -source=resource_pool_fetcher.go -package=service -destination=resource_pool_fetcher_mock.go
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	data "github.com/openshift-kni/oran-o2ims/internal/data"
	gomock "go.uber.org/mock/gomock"
)

// MockResourcePoolFetcher is a mock of ResourcePoolFetcher interface.
type MockResourcePoolFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockResourcePoolFetcherMockRecorder
}

// MockResourcePoolFetcherMockRecorder is the mock recorder for MockResourcePoolFetcher.
type MockResourcePoolFetcherMockRecorder struct {
	mock *MockResourcePoolFetcher
}

// NewMockResourcePoolFetcher creates a new mock instance.
func NewMockResourcePoolFetcher(ctrl *gomock.Controller) *MockResourcePoolFetcher {
	mock := &MockResourcePoolFetcher{ctrl: ctrl}
	mock.recorder = &MockResourcePoolFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourcePoolFetcher) EXPECT() *MockResourcePoolFetcherMockRecorder {
	return m.recorder
}

// FetchItems mocks base method.
func (m *MockResourcePoolFetcher) FetchItems(ctx context.Context) (data.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchItems", ctx)
	ret0, _ := ret[0].(data.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchItems indicates an expected call of FetchItems.
func (mr *MockResourcePoolFetcherMockRecorder) FetchItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchItems", reflect.TypeOf((*MockResourcePoolFetcher)(nil).FetchItems), ctx)
}
